import Ajv from 'ajv';
import { stringify } from 'query-string';

const ajv = new Ajv({ unknownFormats: ['int32', 'int64']});

{{> errors this}}

{{> config this}}

{{models}}

{{#each operations}}
  {{models}}
{{/each}}
{{#each operations}}
  {{#if (or query header params data)}}
    export interface {{capitalize name}}Request {
      {{#if query}}
      query?: {{capitalize name}}Query;
      {{/if}}
      {{#if params}}
      params?: {{capitalize name}}Params;
      {{/if}}
      {{#if data}}
        data?: FormData | {{capitalize name}}RequestBody{{capitalize mimeTypeSuffix}};
      {{/if}}
      {{#if header}}
      headers?: {{capitalize name}}Headers,
      {{/if}}
    }
  {{/if}}
  {{#if (or query header params data)}}
    export const {{name}}: (request: {{capitalize name}}Request, config?: Config) => Promise<{{capitalize name}}Response> = async ({
      {{#if query}}
        query = {},
      {{/if}}
      {{#if params}}
        params = {},
      {{/if}}
      {{#if data}}
        data = {},
      {{/if}}
      {{#if header}}
        headers = {},
      {{/if}}
    } = {}, config = defaultConfig) => {
  {{else}}
    export const {{name}}: (config?: Config) => Promise<{{capitalize name}}Response> = async (config = defaultConfig) => {
  {{/if}}
  {{#if (or query params)}}
    let requestUrl = `${config.baseUrl}{{path}}`;
  {{else}}
    const requestUrl = `${config.baseUrl}{{path}}`;
  {{/if}}

  {{> queryString operation=this options=../options }}

  {{> parameters operation=this options=../options }}

  {{> headers operation=this options=../options }}

  {{> body operation=this options=../options }}

  {{> request operation=this options=../options }}
  }
{{/each}}

