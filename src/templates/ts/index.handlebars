import Ajv from 'ajv';
import { stringify } from 'query-string';

const ajv = new Ajv();

class ApiError extends Error {
  status: number;

  statusText: string;

  headers: Headers;

  response: any;

  constructor({
    status,
    statusText,
    response,
    message,
    headers,
  }: {
    status: number;
    statusText: string;
    response: any;
    message: string;
    headers: Headers;
  }) {
    super(message);
    this.status = status;
    this.response = response;
    this.statusText = statusText;
    this.headers = headers;
  }
}

class ClientCodeError extends Error {}

class RequestValidationError extends Error {
  element: 'query' | 'params' | 'body' | 'headers';

  method: string;

  errors: any[];

  constructor({
    message,
    element,
    method,
    errors = [],
    }: {
      message: string;
      element: 'query' | 'params' | 'body' | 'headers';
      method: string;
      errors?: any[];
    }) {
    super(message);

    this.element = element;
    this.method = method;
    this.errors = errors;
  }
}

class ResponseValidationError extends Error {
  method: string;

  errors: any[];

  constructor({
    message,
    method,
    errors = [],
  }: {
    message: string;
    method: string;
    errors?: any[];
  }) {
    super(message);

    this.method = method;
    this.errors = errors;
  }
}

export interface Config {
  baseUrl: string;
}

const defaultConfig: Config = {
  baseUrl: process.env.API_BASE_URL || '{{info.server}}',
};

{{models}}

{{#each operations}}
  {{models}}
{{/each}}
{{#each operations}}
  {{#if (or query header params data)}}
    export interface {{capitalize name}}Request {
      {{#if query}}
      query?: {{capitalize name}}Query;
      {{/if}}
      {{#if params}}
      params?: {{capitalize name}}Params;
      {{/if}}
      {{#if data}}
        data?: {{capitalize name}}RequestBody{{capitalize mimeTypeSuffix}};
      {{/if}}
      {{#if header}}
      headers?: {{capitalize name}}Headers,
      {{/if}}
    }
  {{/if}}
  {{#if (or query header params data)}}
    export const {{name}}: (request: {{capitalize name}}Request, config: Config) => Promise<{{capitalize name}}Response> = async ({
      {{#if query}}
        query = {},
      {{/if}}
      {{#if params}}
        params = {},
      {{/if}}
      {{#if data}}
        data = {},
      {{/if}}
      {{#if header}}
        headers = {},
      {{/if}}
    } = {}, config = defaultConfig) => {
  {{else}}
    export const {{name}}: (config: Config) => Promise<{{capitalize name}}Response> = async (config = defaultConfig) => {
  {{/if}}
  {{#if (or query params)}}
    let requestUrl = `${config.baseUrl}{{path}}`;
  {{else}}
    const requestUrl = `${config.baseUrl}{{path}}`;
  {{/if}}

  {{> queryString this}}

  {{> parameters this}}

  {{> headers this}}

  {{#if data}}
    const bodySchema = {{json data}};
    const isBodyValid = ajv.validate(bodySchema, data);

    if (!isBodyValid) {
      throw new RequestValidationError({
        message: 'Request body schema validation error',
        method: '{{name}}',
        element: 'body',
      });
    }

    let requestParams;

    if (data) {
      requestParams = {
        method: '{{method}}',
        headers: requestHeaders,
        body: data instanceof FormData ? data : JSON.stringify(data),
      };
    } else {
      requestParams = {
        method: '{{method}}',
        headers: requestHeaders,
      };
    }

  {{else}}
    const requestParams = {
      method: '{{method}}',
      headers: requestHeaders,
    };
  {{/if}}


  {{> request this}}
  }
{{/each}}

