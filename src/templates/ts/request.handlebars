{{#if options.validateResponse}}
let response: unknown;
{{else}}
let response: any;
{{/if}}

try {
  const [processedUrl, processedParams] = await config.preMiddleware(requestUrl, requestParams{{#if operation.header}} as RequestInit{{/if}})
  const responseObject = await fetch(processedUrl, processedParams{{#if operation.header}} as RequestInit{{/if}});
  response = await responseObject.json();

  if (!responseObject.ok) {
    throw new ApiError<typeof response>({
      message: 'Api error while fetching {{operation.name}}',
      status: responseObject.status,
      statusText: responseObject.statusText,
      response,
      headers: responseObject.headers,
    });
  }
} catch (error) {
  if (error instanceof ApiError) {
    throw error;
  } else {
    throw error as ClientCodeError;
  }
}

{{#if (and operation.response options.validateResponse)}}
  const responseSchema = {{json operation.response}};

  function isResponse(obj: unknown): obj is {{capitalize operation.name}}Response {
    const isValid = ajv.validate(responseSchema, obj);

    return !!isValid;
  }

  if (!isResponse(response)) {
    throw new ResponseValidationError({
      message: 'Response schema validation error',
      method: '{{operation.name}}',
      errors: ajv.errors || [],
    });
  }

  return response;
{{else}}
  return response as {{capitalize operation.name}}Response;
{{/if}}

